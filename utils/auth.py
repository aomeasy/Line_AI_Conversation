import streamlit as st
import hashlib
import time
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

def check_admin_auth() -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á Admin"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if st.session_state.get('authenticated', False):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session timeout
        if 'auth_timestamp' in st.session_state:
            auth_time = st.session_state['auth_timestamp']
            current_time = datetime.now()
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ logout
            if current_time - auth_time > timedelta(hours=1):
                logout()
                return False
        
        return True
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ login
    show_login_page()
    return False

def show_login_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"""
    
    # CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ login
    st.markdown("""
    <style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        color: white;
        text-align: center;
        margin-top: 10vh;
    }
    .login-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .login-subtitle {
        font-size: 1rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }
    .stTextInput > div > div > input {
        border-radius: 10px;
        border: none;
        padding: 12px;
        font-size: 16px;
        background: rgba(255,255,255,0.9);
    }
    .login-button {
        background: linear-gradient(45deg, #ff6b6b, #feca57);
        border: none;
        border-radius: 25px;
        padding: 12px 30px;
        font-size: 16px;
        font-weight: bold;
        color: white;
        cursor: pointer;
        transition: transform 0.2s;
    }
    .login-button:hover {
        transform: translateY(-2px);
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Container ‡∏´‡∏•‡∏±‡∏Å
    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    
    # Logo ‡πÅ‡∏•‡∏∞ Title
    st.markdown("""
    <div class="login-title">üîê Admin Login</div>
    <div class="login-subtitle">LINE OA Analytics Dashboard</div>
    """, unsafe_allow_html=True)
    
    # Form ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    with st.form("login_form"):
        username = st.text_input(
            "Username",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            key="login_username"
        )
        
        password = st.text_input(
            "Password", 
            type="password",
            placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
            key="login_password"
        )
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submitted = st.form_submit_button(
                "üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", 
                use_container_width=True
            )
        
        if submitted:
            if authenticate_user(username, password):
                st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"):
        st.write("**Username:** admin")
        st.write("**Password:** admin123")
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")

def authenticate_user(username: str, password: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting
        if not check_rate_limit(username):
            st.error("üö´ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ")
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if 'db_manager' in st.session_state:
            user_data = st.session_state.db_manager.verify_admin_credentials(username, password)
            
            if user_data:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
                st.session_state['authenticated'] = True
                st.session_state['user_data'] = user_data
                st.session_state['auth_timestamp'] = datetime.now()
                
                # ‡∏•‡πâ‡∏≤‡∏á rate limiting
                clear_rate_limit(username)
                
                return True
            else:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                record_failed_attempt(username)
                return False
        
        # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ database
        from utils.config import DEFAULT_ADMIN_USERNAME, DEFAULT_ADMIN_PASSWORD
        if username == DEFAULT_ADMIN_USERNAME and password == DEFAULT_ADMIN_PASSWORD:
            st.session_state['authenticated'] = True
            st.session_state['user_data'] = {
                'username': username,
                'role': 'admin',
                'full_name': 'System Administrator'
            }
            st.session_state['auth_timestamp'] = datetime.now()
            clear_rate_limit(username)
            return True
        
        record_failed_attempt(username)
        return False
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {str(e)}")
        return False

def check_rate_limit(username: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login"""
    rate_limit_key = f"login_attempts_{username}"
    
    if rate_limit_key not in st.session_state:
        st.session_state[rate_limit_key] = []
    
    # ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    current_time = datetime.now()
    attempts = st.session_state[rate_limit_key]
    valid_attempts = [
        attempt for attempt in attempts 
        if current_time - attempt < timedelta(minutes=15)
    ]
    st.session_state[rate_limit_key] = valid_attempts
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
    return len(valid_attempts) < 5

def record_failed_attempt(username: str):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
    rate_limit_key = f"login_attempts_{username}"
    
    if rate_limit_key not in st.session_state:
        st.session_state[rate_limit_key] = []
    
    st.session_state[rate_limit_key].append(datetime.now())

def clear_rate_limit(username: str):
    """‡∏•‡πâ‡∏≤‡∏á rate limiting ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    rate_limit_key = f"login_attempts_{username}"
    if rate_limit_key in st.session_state:
        del st.session_state[rate_limit_key]

def logout():
    """‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"""
    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
    keys_to_clear = ['authenticated', 'user_data', 'auth_timestamp']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    
    st.success("‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    time.sleep(1)
    st.rerun()

def get_current_user() -> Optional[Dict[str, Any]]:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    if st.session_state.get('authenticated', False):
        return st.session_state.get('user_data')
    return None

def require_role(required_role: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° role"""
    user_data = get_current_user()
    if not user_data:
        return False
    
    user_role = user_data.get('role', 'agent')
    
    # Role hierarchy: admin > manager > agent
    role_hierarchy = {
        'admin': 3,
        'manager': 2,
        'agent': 1
    }
    
    user_level = role_hierarchy.get(user_role, 0)
    required_level = role_hierarchy.get(required_role, 0)
    
    return user_level >= required_level

def show_user_info():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á"""
    user_data = get_current_user()
    if user_data:
        with st.sidebar:
            st.markdown("---")
            st.markdown("### üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            
            # ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
            st.markdown("""
            <div style="text-align: center; margin-bottom: 1rem;">
                <div style="
                    width: 60px; 
                    height: 60px; 
                    border-radius: 50%; 
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 24px;
                    font-weight: bold;
                ">
                    üë§
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            st.write(f"**‡∏ä‡∏∑‡πà‡∏≠:** {user_data.get('full_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
            st.write(f"**‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:** {get_role_display(user_data.get('role', 'agent'))}")
            st.write(f"**‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {user_data.get('username', 'Unknown')}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            if 'auth_timestamp' in st.session_state:
                login_time = st.session_state['auth_timestamp']
                st.write(f"**‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:** {login_time.strftime('%H:%M:%S')}")
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True):
                logout()

def get_role_display(role: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á role ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    role_names = {
        'admin': 'üëë ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        'manager': 'üëî ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
        'agent': 'üë®‚Äçüíº ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
    }
    return role_names.get(role, '‚ùì ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')

def create_admin_user(username: str, password: str, email: str, full_name: str, role: str = 'agent') -> bool:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin ‡πÉ‡∏´‡∏°‡πà"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ)
        if not require_role('admin'):
            return False
        
        # Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if 'db_manager' in st.session_state:
            with st.session_state.db_manager.engine.connect() as conn:
                from sqlalchemy import text
                
                conn.execute(text("""
                    INSERT INTO admin_users (username, password_hash, email, full_name, role)
                    VALUES (:username, :password_hash, :email, :full_name, :role)
                """), {
                    "username": username,
                    "password_hash": password_hash,
                    "email": email,
                    "full_name": full_name,
                    "role": role
                })
                conn.commit()
            
            return True
        
        return False
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {str(e)}")
        return False

def change_password(current_password: str, new_password: str) -> bool:
    """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"""
    try:
        user_data = get_current_user()
        if not user_data:
            return False
        
        username = user_data['username']
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
        if not authenticate_user(username, current_password):
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return False
        
        # Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        new_password_hash = hashlib.sha256(new_password.encode()).hexdigest()
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if 'db_manager' in st.session_state:
            with st.session_state.db_manager.engine.connect() as conn:
                from sqlalchemy import text
                
                conn.execute(text("""
                    UPDATE admin_users 
                    SET password_hash = :password_hash,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE username = :username
                """), {
                    "password_hash": new_password_hash,
                    "username": username
                })
                conn.commit()
            
            return True
        
        return False
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {str(e)}")
        return False

def validate_password_strength(password: str) -> Dict[str, Any]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"""
    score = 0
    feedback = []
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    if len(password) >= 8:
        score += 1
    else:
        feedback.append("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏ç‡πà
    if any(c.isupper() for c in password):
        score += 1
    else:
        feedback.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏ç‡πà")
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏•‡πá‡∏Å
    if any(c.islower() for c in password):
        score += 1
    else:
        feedback.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏•‡πá‡∏Å")
    
    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if any(c.isdigit() for c in password):
        score += 1
    else:
        feedback.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    
    # ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    if any(c in special_chars for c in password):
        score += 1
    else:
        feedback.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
    if score <= 2:
        strength = "‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠"
        color = "red"
    elif score <= 3:
        strength = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        color = "orange"
    elif score <= 4:
        strength = "‡∏î‡∏µ"
        color = "green"
    else:
        strength = "‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å"
        color = "darkgreen"
    
    return {
        'score': score,
        'strength': strength,
        'color': color,
        'feedback': feedback,
        'is_strong': score >= 4
    }

def show_password_strength_meter(password: str):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"""
    if not password:
        return
    
    validation = validate_password_strength(password)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
    progress_html = f"""
    <div style="margin: 10px 0;">
        <div style="background-color: #e0e0e0; border-radius: 10px; height: 10px;">
            <div style="
                background-color: {validation['color']}; 
                width: {(validation['score']/5)*100}%; 
                height: 100%; 
                border-radius: 10px;
                transition: width 0.3s ease;
            "></div>
        </div>
        <small style="color: {validation['color']};">
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á: {validation['strength']}
        </small>
    </div>
    """
    
    st.markdown(progress_html, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if validation['feedback']:
        with st.expander("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            for tip in validation['feedback']:
                st.write(f"‚Ä¢ {tip}")

def get_user_activity_log(username: str, limit: int = 10) -> list:
    """‡∏î‡∏∂‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        if 'db_manager' in st.session_state:
            with st.session_state.db_manager.engine.connect() as conn:
                from sqlalchemy import text
                
                result = conn.execute(text("""
                    SELECT 
                        last_login,
                        created_at,
                        updated_at,
                        is_active
                    FROM admin_users 
                    WHERE username = :username
                """), {"username": username})
                
                user_info = result.fetchone()
                if user_info:
                    return [{
                        'activity': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
                        'timestamp': user_info.last_login,
                        'details': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö'
                    }]
        
        return []
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: {str(e)}")
        return []